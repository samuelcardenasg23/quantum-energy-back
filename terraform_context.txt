terraform {
  required_version = ">= 1.6.0"
  required_providers {
    aws    = { source = "hashicorp/aws", version = "~> 5.0" }
    random = { source = "hashicorp/random", version = "~> 3.6" }
  }
  # backend "s3" {
  #   bucket         = "YOUR-TF-STATE-BUCKET"
  #   key            = "mini-frontend/${var.env}/terraform.tfstate"
  #   region         = var.region
  #   dynamodb_table = "YOUR-TF-LOCKS-TABLE"
  #   encrypt        = true
  # }
}

provider "aws" { region = var.region }

locals {
  name = "${var.app_name}-${var.env}"
  tags = merge(var.tags, { Environment = var.env, App = var.app_name, ManagedBy = "Terraform" })
}

############################
# S3 + CloudFront (static) #
############################
resource "aws_s3_bucket" "site" {
  bucket        = "${local.name}-site"
  force_destroy = true
  tags          = local.tags
}

resource "aws_cloudfront_origin_access_identity" "oai" {
  comment = "${local.name}-oai"
}

resource "aws_s3_bucket_policy" "site_policy" {
  bucket = aws_s3_bucket.site.id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Sid       = "CloudFrontOriginAccess",
      Effect    = "Allow",
      Principal = { AWS = aws_cloudfront_origin_access_identity.oai.iam_arn },
      Action    = ["s3:GetObject"],
      Resource  = ["${aws_s3_bucket.site.arn}/*"]
    }]
  })
}

resource "aws_s3_bucket_public_access_block" "block" {
  bucket                  = aws_s3_bucket.site.id
  block_public_acls       = true
  block_public_policy     = false
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_cloudfront_distribution" "cdn" {
  enabled             = true
  default_root_object = "index.html"

  origin {
    domain_name = aws_s3_bucket.site.bucket_regional_domain_name
    origin_id   = "s3origin"
    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path
    }
  }

  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = "s3origin"
    viewer_protocol_policy = "redirect-to-https"
    forwarded_values {
      query_string = false
      cookies { forward = "none" }
    }
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
      locations        = []
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
    minimum_protocol_version       = "TLSv1.2_2021"
  }

  tags = local.tags
}

#####################
# Networking (VPC)  #
#####################
resource "aws_vpc" "app" {
  cidr_block           = "10.50.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = merge(local.tags, { Name = "${local.name}-vpc" })
}

data "aws_availability_zones" "azs" {}

resource "aws_subnet" "public" {
  count                   = 2
  vpc_id                  = aws_vpc.app.id
  cidr_block              = cidrsubnet(aws_vpc.app.cidr_block, 4, count.index)
  map_public_ip_on_launch = true
  availability_zone       = data.aws_availability_zones.azs.names[count.index]
  tags = merge(local.tags, { Name = "${local.name}-pub-${count.index}" })
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.app.id
  tags   = local.tags
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.app.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = local.tags
}

resource "aws_route_table_association" "pub_assoc" {
  count          = 2
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

# Subnets privadas para RDS
resource "aws_subnet" "private" {
  count                   = 2
  vpc_id                  = aws_vpc.app.id
  cidr_block              = cidrsubnet(aws_vpc.app.cidr_block, 4, count.index + 8)
  map_public_ip_on_launch = false
  availability_zone       = data.aws_availability_zones.azs.names[count.index]
  tags = merge(local.tags, { Name = "${local.name}-priv-${count.index}" })
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.app.id
  tags   = local.tags
}

resource "aws_route_table_association" "priv_assoc" {
  count          = 2
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private.id
}

#####################
# Security Groups   #
#####################
resource "aws_security_group" "alb_sg" {
  name        = "${local.name}-alb-sg"
  description = "ALB ingress 80"
  vpc_id      = aws_vpc.app.id
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = local.tags
}

resource "aws_security_group" "ecs_sg" {
  name        = "${local.name}-ecs-sg"
  description = "Allow ALB to ECS"
  vpc_id      = aws_vpc.app.id
  ingress {
    from_port       = var.container_port
    to_port         = var.container_port
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = local.tags
}

########################
# RDS Postgres (priv)  #
########################
resource "aws_security_group" "rds_sg" {
  name        = "${local.name}-rds-sg"
  description = "Allow ECS Postgres 5432"
  vpc_id      = aws_vpc.app.id
  ingress {
    description     = "ECS Postgres"
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [aws_security_group.ecs_sg.id]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = local.tags
}

resource "aws_db_subnet_group" "app" {
  name       = "${local.name}-db-subnets"
  subnet_ids = [for s in aws_subnet.private : s.id]
  tags       = local.tags
}

resource "random_password" "db" {
  length  = 20
  special = true
  override_special = "!#$%^&*()_-+=[]{}:;,.?~" # evita / @ "
}

resource "aws_db_instance" "app" {
  identifier                    = "${local.name}-pg"
  engine                        = "postgres"
  # engine_version              = var.db_engine_ver   # opcional si quieres fijar versión
  instance_class                = var.db_instance_class
  allocated_storage             = var.db_allocated_gb

  db_name                       = var.db_name
  username                      = var.db_username           # ← ESTE es el usuario MASTER
  password                      = random_password.db.result     

  db_subnet_group_name          = aws_db_subnet_group.app.name
  vpc_security_group_ids        = [aws_security_group.rds_sg.id]
  multi_az                      = var.db_multi_az
  storage_encrypted             = true
  backup_retention_period       = var.db_backup_days
  deletion_protection           = false
  skip_final_snapshot           = true
  publicly_accessible           = false
  apply_immediately             = true

  tags = local.tags
}

##############################
# ECR + IAM OIDC (GitHub)    #
##############################
resource "aws_iam_openid_connect_provider" "github" {
  url             = "https://token.actions.githubusercontent.com"
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1"]
}

resource "aws_ecr_repository" "backend" {
  name                 = "quantum-energy-back"
  image_tag_mutability = "MUTABLE"
  image_scanning_configuration { scan_on_push = true }
  tags = local.tags
}

resource "aws_iam_role" "gha_ecr_ecs" {
  name = "gha-quantum-energy-back-ecr-ecs"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = { Federated = aws_iam_openid_connect_provider.github.arn },
      Action    = "sts:AssumeRoleWithWebIdentity",
      Condition = {
        StringEquals = { "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com" },
        StringLike   = { "token.actions.githubusercontent.com:sub" = "repo:samuelcardenasg23/quantum-energy-back:*" }
      }
    }]
  })
  tags = local.tags
}

data "aws_iam_policy_document" "gha_ecr_ecs" {
  statement {
    effect  = "Allow"
    actions = [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability","ecr:BatchGetImage","ecr:CompleteLayerUpload",
      "ecr:DescribeRepositories","ecr:DescribeImages","ecr:InitiateLayerUpload",
      "ecr:PutImage","ecr:UploadLayerPart"
    ]
    resources = ["*"]
  }
  statement {
    effect  = "Allow"
    actions = ["ecs:DescribeServices","ecs:DescribeTaskDefinition","ecs:RegisterTaskDefinition","ecs:UpdateService","ecs:DescribeClusters"]
    resources = ["*"]
  }
}

resource "aws_iam_policy" "gha_ecr_ecs" {
  name   = "gha-quantum-energy-back-ecr-ecs"
  policy = data.aws_iam_policy_document.gha_ecr_ecs.json
}

resource "aws_iam_role_policy_attachment" "gha_ecr_ecs_attach" {
  role       = aws_iam_role.gha_ecr_ecs.name
  policy_arn = aws_iam_policy.gha_ecr_ecs.arn
}

########################
# ALB + Target + Lsnr  #
########################
resource "aws_lb" "app" {
  name               = "${local.name}-alb"
  load_balancer_type = "application"
  subnets            = [for s in aws_subnet.public : s.id]
  security_groups    = [aws_security_group.alb_sg.id]
  tags               = local.tags
}

resource "aws_lb_target_group" "tg" {
  name_prefix = "qa-"          # ≤ 6 chars
  port        = var.container_port
  protocol    = "HTTP"
  vpc_id      = aws_vpc.app.id
  target_type = "ip"
  health_check {
    path                = var.health_check_path
    healthy_threshold   = 2
    unhealthy_threshold = 5
    interval            = 30
    matcher             = "200-399"
  }
  lifecycle { create_before_destroy = true }
  tags = local.tags
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.app.arn
  port              = 80
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

########################
# ECS + Task + Logs    #
########################
resource "aws_cloudwatch_log_group" "app" {
  name              = "/ecs/${local.name}"
  retention_in_days = 7
  tags              = local.tags
}

resource "aws_ecs_cluster" "app" {
  name = "${local.name}-cluster"
  tags = local.tags
}

resource "aws_iam_role" "task_exec" {
  name = "${local.name}-task-exec"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{ Effect = "Allow", Principal = { Service = "ecs-tasks.amazonaws.com" }, Action = "sts:AssumeRole" }]
  })
  tags = local.tags
}

resource "aws_iam_role_policy_attachment" "task_exec_policy" {
  role       = aws_iam_role.task_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Role de la app para leer Secrets
resource "aws_iam_role" "task_app" {
  name = "${local.name}-task-app"
  assume_role_policy = jsonencode({
    Version="2012-10-17",
    Statement=[{Effect="Allow", Principal={Service="ecs-tasks.amazonaws.com"}, Action="sts:AssumeRole"}]
  })
  tags = local.tags
}

# Secret DATABASE_URL (construido desde RDS)
locals {
  db_host      = aws_db_instance.app.address
  db_port      = 5432
  db_password_e  = urlencode(random_password.db.result)
  database_url   = "postgresql://${var.db_username}:${local.db_password_e}@${local.db_host}:${local.db_port}/${var.db_name}"
}

resource "aws_secretsmanager_secret" "db_url" {
  name = "${local.name}/DATABASE_URL"
  tags = local.tags
}

resource "aws_secretsmanager_secret_version" "db_url_v" {
  secret_id     = aws_secretsmanager_secret.db_url.id
  secret_string = local.database_url
}

data "aws_iam_policy_document" "read_db_secret" {
  statement {
    effect    = "Allow"
    actions   = ["secretsmanager:GetSecretValue", "secretsmanager:DescribeSecret"]
    resources = [aws_secretsmanager_secret.db_url.arn]
  }
}

resource "aws_iam_policy" "read_db_secret" {
  name   = "${local.name}-read-db-secret"
  policy = data.aws_iam_policy_document.read_db_secret.json
}

resource "aws_iam_role_policy_attachment" "task_app_read_secret" {
  role       = aws_iam_role.task_app.name
  policy_arn = aws_iam_policy.read_db_secret.arn
}

resource "aws_ecs_task_definition" "app" {
  family                   = "${local.name}-td"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = 256
  memory                   = 512
  execution_role_arn       = aws_iam_role.task_exec.arn
  task_role_arn            = aws_iam_role.task_app.arn
  container_definitions = jsonencode([{
    name      = "app",
    image     = var.container_image,
    essential = true,
    portMappings = [{ containerPort = var.container_port, hostPort = var.container_port, protocol = "tcp" }],
    logConfiguration = {
      logDriver = "awslogs",
      options = {
        awslogs-group         = aws_cloudwatch_log_group.app.name,
        awslogs-region        = var.region,
        awslogs-stream-prefix = "ecs"
      }
    },
    secrets = [
      { name = "DATABASE_URL", valueFrom = aws_secretsmanager_secret.db_url.id }
    ],
    environment = [
      { name = "PORT", value = tostring(var.container_port) },
      { name = "DB_SSL",          value = "true" },
      { name = "DB_SSL_REJECT",   value = "false" }
    ]
  }])
  runtime_platform {
    operating_system_family = "LINUX"
    cpu_architecture        = "X86_64"
  }
  tags = local.tags
}

resource "aws_ecs_service" "app" {
  name            = "${local.name}-svc"
  cluster         = aws_ecs_cluster.app.id
  task_definition = aws_ecs_task_definition.app.arn
  desired_count   = var.desired_count
  launch_type     = "FARGATE"
  enable_execute_command = false
  network_configuration {
    subnets         = [for s in aws_subnet.public : s.id]
    security_groups = [aws_security_group.ecs_sg.id]
    assign_public_ip = true
  }
  load_balancer {
    target_group_arn = aws_lb_target_group.tg.arn
    container_name   = "app"
    container_port   = var.container_port
  }
  depends_on = [aws_lb_listener.http]
  tags = local.tags
}

# Permisos para que EL EXECUTION ROLE lea el secret en el arranque
data "aws_iam_policy_document" "exec_can_read_db_secret" {
  statement {
    effect = "Allow"
    actions = [
      "secretsmanager:GetSecretValue",
      "secretsmanager:DescribeSecret"
    ]
    # Usa wildcard para incluir las versiones del secret
    resources = [
      "${aws_secretsmanager_secret.db_url.arn}",
      "${aws_secretsmanager_secret.db_url.arn}*"
    ]
  }
}

resource "aws_iam_policy" "exec_read_db_secret" {
  name   = "${local.name}-exec-read-db-secret"
  policy = data.aws_iam_policy_document.exec_can_read_db_secret.json
}

resource "aws_iam_role_policy_attachment" "task_exec_read_secret" {
  role       = aws_iam_role.task_exec.name         # 👈 execution role
  policy_arn = aws_iam_policy.exec_read_db_secret.arn
}


############
# Outputs  #
############
output "alb_dns_name"      { value = aws_lb.app.dns_name }
output "ecr_repo_url"      { value = aws_ecr_repository.backend.repository_url }
output "gha_role_arn"      { value = aws_iam_role.gha_ecr_ecs.arn }
output "bucket_name"       { value = aws_s3_bucket.site.bucket }
output "cloudfront_domain" { value = aws_cloudfront_distribution.cdn.domain_name }
# RDS/Secrets
output "rds_endpoint"      { value = aws_db_instance.app.address }
output "db_secret_arn"     { value = aws_secretsmanager_secret.db_url.arn }
